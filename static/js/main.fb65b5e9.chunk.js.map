{"version":3,"sources":["imgs/plus.png","imgs/minus.png","imgs/station-cover.png","imgs/back-arrow.png","imgs/switch.png","ActiveStation.js","Station.js","CurrentlyPlaying.js","stations.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ActiveStation","backgroundImg","backgroundImage","this","props","cover","className","src","minus","alt","style","plus","Component","defaultProps","defaultCover","Station","name","frequency","onStationClick","isCurrentlyPlaying","Fragment","onClick","CurrentlyPlaying","playing","APIResponse","App","switchOff","setState","currentStation","showStation","station","state","stations","isLoading","failed","console","log","Promise","resolve","reject","setTimeout","then","value","catch","error","message","backArrow","switchBtn","map","i","key","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb65b5e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus.10db4c25.png\";","module.exports = __webpack_public_path__ + \"static/media/minus.9d1af844.png\";","module.exports = __webpack_public_path__ + \"static/media/station-cover.d84344b8.png\";","module.exports = __webpack_public_path__ + \"static/media/back-arrow.8b358c45.png\";","module.exports = __webpack_public_path__ + \"static/media/switch.3a0c76ad.png\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ActiveStation.scss';\r\nimport plus from './imgs/plus.png';\r\nimport minus from './imgs/minus.png';\r\nimport defaultCover from './imgs/station-cover.png';\r\n\r\nclass ActiveStation extends Component {\r\n\tstatic defaultProps = {\r\n\t\tcover : defaultCover\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst backgroundImg = { backgroundImage: `url(${this.props.cover})` };\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"active-station\">\r\n\t\t\t\t<div className=\"active-station-volume\">\r\n\t\t\t\t\t<img src={minus} alt=\"Turn down the volume\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"active-station-cover\" style={backgroundImg} />\r\n\t\t\t\t<div className=\"active-station-volume\">\r\n\t\t\t\t\t<img src={plus} alt=\"Turn up the volume\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nActiveStation.propTypes = {\r\n\tcover : PropTypes.string\r\n};\r\n\r\nexport default ActiveStation;\r\n","import React, { Component } from 'react';\r\nimport ActiveStation from './ActiveStation';\r\nimport PropTypes from 'prop-types';\r\nimport './Station.scss';\r\n\r\nclass Station extends Component {\r\n\trender() {\r\n\t\tconst { name, frequency, onStationClick, isCurrentlyPlaying } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className=\"station\" onClick={() => onStationClick(name)}>\r\n\t\t\t\t\t<span className=\"station-name\">{name}</span>\r\n\t\t\t\t\t<span className=\"station-frequency\">{frequency}</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{isCurrentlyPlaying && <ActiveStation cover={this.props.cover} />}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nStation.propTypes = {\r\n\tname               : PropTypes.string.isRequired,\r\n\tfrequency          : PropTypes.string.isRequired,\r\n\tcover              : PropTypes.string,\r\n\tonStationClick     : PropTypes.func.isRequired,\r\n\tisCurrentlyPlaying : PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Station;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CurrentlyPlaying.scss';\r\n\r\nclass CurrentlyPlaying extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<span className=\"currently-playing-header\">currently playing</span>\r\n\t\t\t\t<span className=\"currently-playing-station\">{this.props.playing}</span>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nCurrentlyPlaying.propTypes = {\r\n\tplaying : PropTypes.string\r\n};\r\n\r\nexport default CurrentlyPlaying;\r\n","const APIResponse = [\r\n\t{ name: 'Putin FM', frequency: '66,6' },\r\n\t{ name: 'Dribbble FM', frequency: '101,2' },\r\n\t{ name: 'Doge FM', frequency: '99,4' },\r\n\t{\r\n\t\tname      : 'Ballads FM',\r\n\t\tfrequency : '87,1',\r\n\t\tcover     : 'https://coolsilh.com/png-256/2167964-moon_001.png'\r\n\t},\r\n\t{ name: 'Maximum FM', frequency: '142,2' }\r\n];\r\n\r\nexport const getStations = () => {\r\n\tconsole.log(`Let's call API!`);\r\n\r\n\tconst mockedAPICall = new Promise((resolve, reject) => {\r\n\t\t// this reject is just for testing error handling\r\n\t\t// reject(new Error('ERROR!'));\r\n\t\tsetTimeout(() => resolve(APIResponse), 500);\r\n\t});\r\n\r\n\treturn mockedAPICall;\r\n};\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Station from './Station';\r\nimport CurrentlyPlaying from './CurrentlyPlaying';\r\nimport backArrow from './imgs/back-arrow.png';\r\nimport switchBtn from './imgs/switch.png';\r\nimport { getStations } from './stations';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcurrentStation : null,\r\n\t\t\tstations       : [],\r\n\t\t\tisLoading      : true,\r\n\t\t\tfailed         : false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tgetStations()\r\n\t\t\t.then((value) => {\r\n\t\t\t\tconsole.log('Data received!');\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tstations  : value,\r\n\t\t\t\t\tisLoading : false\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error.message);\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisLoading : false,\r\n\t\t\t\t\tfailed    : true\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\tconsole.log('API called, waiting for data');\r\n\t}\r\n\r\n\tswitchOff = () => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentStation : null\r\n\t\t});\r\n\t};\r\n\r\n\tshowStation = (name) => {\r\n\t\tconst station = this.state.currentStation === name ? null : name;\r\n\r\n\t\tthis.setState({\r\n\t\t\tcurrentStation : station\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"radio-container\">\r\n\t\t\t\t<div className=\"radio-header\">\r\n\t\t\t\t\t<div className=\"radio-header-icon\">\r\n\t\t\t\t\t\t<img src={backArrow} alt=\"Back\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\tStations\r\n\t\t\t\t\t<div className=\"radio-header-icon\" onClick={this.switchOff}>\r\n\t\t\t\t\t\t<img src={switchBtn} alt=\"Switch on/off\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"radio-stations\">\r\n\t\t\t\t\t{this.state.isLoading && <p className=\"status-msg\">Loading...</p>}\r\n\t\t\t\t\t{this.state.failed && <p className=\"status-msg\">Sorry! No radio today :(</p>}\r\n\t\t\t\t\t<ul className=\"radio-stations-list\">\r\n\t\t\t\t\t\t{this.state.stations.map((station, i) => (\r\n\t\t\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t\t\t<Station\r\n\t\t\t\t\t\t\t\t\tname={station.name}\r\n\t\t\t\t\t\t\t\t\tfrequency={station.frequency}\r\n\t\t\t\t\t\t\t\t\tcover={station.cover}\r\n\t\t\t\t\t\t\t\t\tonStationClick={this.showStation}\r\n\t\t\t\t\t\t\t\t\tisCurrentlyPlaying={this.state.currentStation === station.name}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"currently-playing\">\r\n\t\t\t\t\t{this.state.currentStation && <CurrentlyPlaying playing={this.state.currentStation} />}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}